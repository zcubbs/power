// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: service_power.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Blueprint_GenerateProject_FullMethodName = "/power.Blueprint/GenerateProject"
)

// BlueprintClient is the client API for Blueprint service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlueprintClient interface {
	GenerateProject(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error)
}

type blueprintClient struct {
	cc grpc.ClientConnInterface
}

func NewBlueprintClient(cc grpc.ClientConnInterface) BlueprintClient {
	return &blueprintClient{cc}
}

func (c *blueprintClient) GenerateProject(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error) {
	out := new(GenerateResponse)
	err := c.cc.Invoke(ctx, Blueprint_GenerateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlueprintServer is the server API for Blueprint service.
// All implementations must embed UnimplementedBlueprintServer
// for forward compatibility
type BlueprintServer interface {
	GenerateProject(context.Context, *GenerateRequest) (*GenerateResponse, error)
	mustEmbedUnimplementedBlueprintServer()
}

// UnimplementedBlueprintServer must be embedded to have forward compatible implementations.
type UnimplementedBlueprintServer struct {
}

func (UnimplementedBlueprintServer) GenerateProject(context.Context, *GenerateRequest) (*GenerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateProject not implemented")
}
func (UnimplementedBlueprintServer) mustEmbedUnimplementedBlueprintServer() {}

// UnsafeBlueprintServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlueprintServer will
// result in compilation errors.
type UnsafeBlueprintServer interface {
	mustEmbedUnimplementedBlueprintServer()
}

func RegisterBlueprintServer(s grpc.ServiceRegistrar, srv BlueprintServer) {
	s.RegisterService(&Blueprint_ServiceDesc, srv)
}

func _Blueprint_GenerateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlueprintServer).GenerateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blueprint_GenerateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlueprintServer).GenerateProject(ctx, req.(*GenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Blueprint_ServiceDesc is the grpc.ServiceDesc for Blueprint service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Blueprint_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "power.Blueprint",
	HandlerType: (*BlueprintServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateProject",
			Handler:    _Blueprint_GenerateProject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_power.proto",
}
